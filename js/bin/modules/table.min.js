'use strict';
Cubee.StdTable = function(divElem, options){
	
	/**
	 * creates the jQuery table
	*/
	this.createHtmlTable = function(){
	
		me.stdTableFilter.globalDiv.insertBefore(me.tableElem);
		me.stdTablePaging.globalDiv.insertBefore(me.tableElem);
		me.orderByList = {};
		
		for(var i=0; i<me.htmlColumnList.length; i++){
			var href = me.htmlColumnList[i];
			if(null == href.actionable || href.actionable){
				me.orderByList[href.fieldId] = href.orderby;
				(function(hrefElem){
					hrefElem.on('click', function(event){
						event.preventDefault();
						me.resetOrder(hrefElem.fieldId);
						if(0 == hrefElem.orderby){
							hrefElem.orderby = 1;
							//hrefElem.html('&utrif;');
						}
						else if(1 == hrefElem.orderby){
							hrefElem.orderby = -1;
							//hrefElem.html('&dtrif;');
						}
						else if(-1 == hrefElem.orderby){
							hrefElem.orderby = 0;
							//hrefElem.html('&squf;');
						}
						hrefElem.html(me.options.columnSortHtml[hrefElem.orderby]);
						me.orderByList[hrefElem.fieldId] = hrefElem.orderby;
						me.refreshData();
					})
				})(href);
			}
			
		}
	}
	
	/**
	 * resets the order for all the columns
	*/
	this.resetOrder = function(fieldIdToPreserve){
	
		for(var i=0; i<me.htmlColumnList.length; i++){
			var href = me.htmlColumnList[i];
			if(null == href.actionable || href.actionable){
				if(fieldIdToPreserve != href.fieldId){
					me.orderByList[href.fieldId] = 0;
					href.orderby = 0;
					href.html(me.options.columnSortHtml[href.orderby]);
				}		
			}			
		}
	};
	
	this.triggerPageChange = function(pageNumber){
	
		me.pageNumber = pageNumber;
		me.refreshData();
	};
	
	/*this.triggerFilterChange = function(){
	
		me.refreshData(pageNumber);
	};*/
	
	this.createFilter = function(p1){
		console.log('TODO: create filters with param: ' + p1);
	}
		
	/*this.changeColumnVisibilty = function(){
		
		me.jsonData;
	}*/
	
	/**
	 * fires the HttpRequest to get the data from the server 
	*/
	this.refreshData = function(){
				
		/*** filters part	***/
		var doThrowError = (null != me.options.stopOnFiltersError) ? me.options.stopOnFiltersError : false;
		try{
			var validFilterList = me.stdTableFilter.validateFilterValues(doThrowError);
		}
		catch(ex){
			if(doThrowError){
				me.options.doThisWhenFilterHasError();
				return;
			}
		}
		
		/*** order part ***/
		var orderData = {
			fieldId: 1,
			orderValue: 0
		};
		var orderFieldList = new Array();
		for(var i in me.orderByList){
			orderFieldList.push({fieldId: i, orderValue: me.orderByList[i]});
			if(0 != me.orderByList[i]){
				orderData = {
					fieldId: i,
					orderValue: me.orderByList[i]
				};
			}
		}
		var jsonPostData = {
			order: orderData,
			/*orders: orderFieldList,*/
			filters: validFilterList,
			pageNum: me.pageNumber
        };
		var fct = function(response){
			var jsonResult = response[me.jsonKeyData];
			me.setData(jsonResult);
			me.populateRow();
			me.stdTablePaging.updateTotalNbPage(response[me.jsonNbPageKeyData]);
		};
		var httpOptions = {httpMethod: 'post', dataType: 'json'};
		if(null != options.contentTypePost){
			httpOptions.contentTypePost = options.contentTypePost;
		}
		Cubee.Http.sendRequest(me.urlData, jsonPostData, fct, httpOptions);
	};
	
	/**
	 *
	*/
	this.setData = function(jsonData){
	
		me.jsonData = jsonData;
	};

	/**
	 * creates the rows that display data
	*/
	this.populateRow = function(){
		
		var tBodyElem = me.tableElem.find('tbody').eq(0);
		tBodyElem.html('');
		for(var j=0; j<me.visibleColumnList.length; j++){	
			var colDomElem = $(me.tableElem.find('col')[j]);
			colDomElem.css({width: me.visibleColumnList[j].width});
		}
		for(var i=0; i<me.jsonData.length; i++){
			var trElem = document.createElement('tr');
			var hasTrElemCursorPointer = false;
			if(null != options.onClickRow){
				var $trElem = $(trElem);
				if(null != me.options.onClickRow){
					hasTrElemCursorPointer = true;
					(function(jsonRow){
						$trElem.addClass('cubee-action');
						$trElem.on('click', function(){
							options.onClickRow(jsonRow);
						});
					})(me.jsonData[i]);
				}			
			}		
			for(var j=0; j<me.visibleColumnList.length; j++){
				var tmpColumn = me.visibleColumnList[j];
				var tdElem = document.createElement('td');
				if(null != tmpColumn.renderer){
					var objToAppend = tmpColumn.renderer(me.jsonData[i][tmpColumn.fieldKey], me.jsonData[i]);
					if('string' == $.type(objToAppend)){
						$(tdElem).html(objToAppend);
					}
					else{	//jQuery object given
						$(tdElem).append(objToAppend);
					}
				}
				else{
					$(tdElem).html(me.jsonData[i][tmpColumn.fieldKey]);
				}
				if(null != tmpColumn.onClick){
					(function($tdElem, clickFunction, tdData, rowData, hasTrElemCursorPointer){
						if(!hasTrElemCursorPointer){
							$tdElem.addClass('cubee-action');
						}
						$tdElem.on('click', function(e){
							clickFunction(tdData, rowData);
							e.stopPropagation();
						});
					})($(tdElem), tmpColumn.onClick, me.jsonData[i][tmpColumn.fieldKey], me.jsonData[i], hasTrElemCursorPointer);
				}
				
				trElem.appendChild(tdElem);				
			}
			tBodyElem.append(trElem);
		}
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////// constructor body ///////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	var me = this;
	this.constructor = function(){
	
		//default options:
		if(null == options.filtersPlusButtonHtml){
			options.filtersPlusButtonHtml = '+';
		}
	
		me.options = options;
		me.columnList = options.columnList;
		me.visibleColumnList = new Array();
		for(var i=0; i<me.columnList.length; i++){
			var tmpColumn = me.columnList[i];
			if(null == tmpColumn.visible || tmpColumn.visible){
				me.visibleColumnList.push(tmpColumn);
			}
		}
		
		var tableElem = document.createElement('table');
		tableElem.className = 'cubee ' + (null != options.tableClass) ? options.tableClass : '';
		var trElem = document.createElement('tr');
		var htmlColumnList = new Array();
		var nbColumnsVisible = 0;
		var columnSelectHeader = $('<select></select>');
		for(var i=0; i<me.columnList.length; i++){
			var tmpColumn = me.columnList[i];
			columnSelectHeader.append($('<option value="'+ tmpColumn.fieldId +'">'+ tmpColumn.label +'</option>'));
		}
		
		for(var i=0; i<me.visibleColumnList.length; i++){
			var tmpColumn = me.visibleColumnList[i];		
			nbColumnsVisible = nbColumnsVisible + 1;
			var colElem = document.createElement('col');
			$(colElem).attr('style', 'width:'+ tmpColumn.width +'');
			tableElem.appendChild(colElem);
			var thElem = document.createElement('th');
			var $thElem = $(thElem);
			$thElem.attr('align', 'center');
			var selectElemClone = columnSelectHeader.clone();
			(function(column, index){
				selectElemClone.on('change', function(){
					var selectedFieldId = $(this).val();
					var newVisibleColumn = null;
					for(var i=0; i<me.columnList.length; i++){
						var tmpCol = me.columnList[i];
						if(selectedFieldId == tmpCol.fieldId){
							newVisibleColumn = tmpCol;
						}
					}
					var nextHref = $(this).next('a');
					if(null != newVisibleColumn.actionable && !newVisibleColumn.actionable){
						nextHref.css({display: 'none'});
					}
					else{
						nextHref.css({display: ''});
					}
					me.visibleColumnList[index] = newVisibleColumn;
					me.populateRow();
				});
			})(tmpColumn, i);
			$thElem.append(selectElemClone.val(tmpColumn.fieldId));
			var $a = $('<a href="#" style="padding-left:6px;">'+ me.options.columnSortHtml[0] +'</a>');
			$a.orderby = 0;
			$a.fieldId = tmpColumn.fieldId;
			htmlColumnList.push($a);
			$thElem.append($a);
			trElem.appendChild(thElem);
					
		}
		me.htmlColumnList = htmlColumnList;
		tableElem.appendChild(trElem);
		//---------td 'no row'----------------//
		var tdBodyElem = document.createElement('tbody');
		trElem = document.createElement('tr');
		var tdNoRowElem = document.createElement('td');
		var $tdNoRowElem = $(tdNoRowElem);
		$tdNoRowElem.attr('colspan', nbColumnsVisible).attr('align', 'center');
		$tdNoRowElem.html('no result');
		trElem.appendChild(tdNoRowElem);
		tdBodyElem.appendChild(trElem);
		tableElem.appendChild(tdBodyElem);
		//----------------------------------//
		me.stdTableFilter = new Cubee.StdTableFilter(options);
		me.stdTablePaging = new Cubee.StdTablePaging(me, options);
		me.tableElem = $(tableElem);
		me.globalFormElem = $('<form></form>');
		me.globalFormElem.on('submit', function(e){
			e.preventDefault();
			var pageNumber = 1;
			me.pageNumber = pageNumber;
			me.stdTablePaging.updatePageNumber(pageNumber);
			me.refreshData();
			return false;
		});
		me.globalFormElem.append(me.tableElem);
		divElem.appendChild(me.globalFormElem[0]);
		me.urlData = options.urlData;
		me.jsonKeyData = options.jsonRecordsKeyData;
		me.jsonNbPageKeyData = options.jsonNbPageKeyData;
		me.createHtmlTable();
		me.triggerPageChange(1);
	}
	
	this.constructor();
	
	
};

"use strict";
Cubee.StdTableFilter = function(options){

	var me = this;	
	
	/////////////////////////////////////////////////////////////////////////////////
	/**
	 * creates the global div for the filters
	*/
	/////////////////////////////////////////////////////////////////////////////////
	this.createGlobalDiv = function(){
	
		me.globalDiv = $('<div class="cubee-table-filter"><div>'
				+	'	<div class="cubee-table-filter-title">Filtres </div>'
				+	'	<div class="cubee-model">'
				+	'		<select disabled="disabled" class="filter-operator-id cubee-filter-select"><option value="0">=</option><option value="1">%</option><option value="2"><=</option><option value="3">>=</option><option value="4">!=</option></select> <input disabled="disabled" name="filter-value" type="text" placeholder=" valeur" class="cubee-filter-input" />'
				+	'	</div>'
				+ 	'</div></div>');
	};

	/////////////////////////////////////////////////////////////////////////////////
	/**
	 * validates the values written by the user, and returns the valid ones
	*/
	/////////////////////////////////////////////////////////////////////////////////
	this.validateFilterValues = function(doThrowError){
	
		var hasError = false;
		var cssClassInputError = 'cubee-input-error';
		var validFilterList = new Array();
		for(var i=0; i<me.filterList.length; i++){
			var filterDivElem = me.filterList[i];
			if(!filterDivElem.isRemoved){
				var fiterInputText = filterDivElem.find('input');
				var fiterFieldId = filterDivElem.find('select.filter-field-id').val();
				var fiterOperatorId = filterDivElem.find('select.filter-operator-id').val();
				var column = me.findColumnByFieldId(fiterFieldId);
				var filterValue = fiterInputText.val().replace(' ', '');
				if('' != filterValue){
					if(me.isValidFilterValue(filterValue, column)){
						fiterInputText.removeClass(cssClassInputError);
						if(1*fiterFieldId == fiterFieldId && 1*fiterOperatorId == fiterOperatorId){
							validFilterList.push({
								fieldId: 1*fiterFieldId,
								operatorId: 1*fiterOperatorId,
								value: filterValue
							});
						}					
					}
					else{
						fiterInputText.addClass(cssClassInputError);
						hasError = true;
					}
				}
			}
		}
		if(hasError && doThrowError){
			throw new Error('error in filters values');
		}
		return validFilterList;
	};
	
	/**
	 *
	*/
	this.findColumnByFieldId = function(fieldId){
		
		for(var i=0; i<options.columnList.length; i++){
			var column = options.columnList[i];
			if(fieldId == column.fieldId){
				return column;
			}
		}
		return null;
	};
	
	/**
	 * returns true or false
	*/
	this.isValidFilterValue = function(value, column){
		
		if(CUBEE_TABLE_FIELD_TYPE_STRING == column.type){
			return true;
		}
		else if(CUBEE_TABLE_FIELD_TYPE_DATE == column.type){
			return (/[0-9]{4}-[0-9]{2}-[0-9]{2}/gi).test(value);
		}
		else if(CUBEE_TABLE_FIELD_TYPE_NUMBER == column.type){
			return (1*value == value);
		}
		return true;
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////// constructor body ///////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	this.constructor = function(){
	
		me.filterList = new Array();
		/////	span filter		/////
		var spanAddFilter = $('<span class="cubee-action">'+ options.filtersPlusButtonHtml +'</span>');
		spanAddFilter.on('click', function(){
			var thisElem = $(this);
			if(null == me.spanAddFilter.nbFilterElem){
				me.spanAddFilter.nbFilterElem = 0;
			}
			if(0 == me.spanAddFilter.nbFilterElem){
				me.boutonSendFilter.show();
			}
			me.spanAddFilter.nbFilterElem = me.spanAddFilter.nbFilterElem + 1;
			var parent = thisElem.parent().parent();
			var divModel = parent.children('div.cubee-model');
			Cubee.Http.copyModel(divModel, parent, function(newDiv){
				var positionOfNewDiv = me.filterList.length;
				newDiv.indexInFilterList = positionOfNewDiv;
				newDiv.isRemoved = false;
				me.filterList.push(newDiv);
				var spanDeleteLine = $('<span class="cubee-action"> X </span>');
				spanDeleteLine.on('click', function(){
					me.filterList[newDiv.indexInFilterList].isRemoved = true;
					//me.filterList.splice(newDiv.indexInFilterList, 1);
					newDiv.remove();
					me.spanAddFilter.nbFilterElem = me.spanAddFilter.nbFilterElem - 1;
					if(0 == me.spanAddFilter.nbFilterElem){
						me.boutonSendFilter.hide();
					}
				});
				newDiv.append(spanDeleteLine);
			});
		});
		this.spanAddFilter = spanAddFilter;
		
		/////	<select> for filter field	/////
		var selectField = $('<select disabled="disabled" class="filter-field-id cubee-filter-select"><option>** choix **</option></select>');
		for(var i=0; i<options.columnList.length; i++){
			var column = options.columnList[i];
			if(null == column.actionable || column.actionable){
				selectField.append($('<option value="'+ column.fieldId +'">'+ column.label +'</option>'));
			}
		}
		
		/////	bouton post filter	/////
		var boutonSendFilter = $('<input type="submit" class="cubee-filter-submit" />');
		boutonSendFilter.hide();
		me.boutonSendFilter = boutonSendFilter;
		me.createGlobalDiv();
		
		me.globalDiv.find('.cubee-table-filter-title').append(me.spanAddFilter);
		me.globalDiv.find('.cubee-model').prepend(/*me.*/selectField);
		me.globalDiv.append(me.boutonSendFilter);
	}
	
	this.constructor();
	
};

"use strict";
Cubee.StdTablePaging = function(stdTable, options){

	var me = this;	
	
	/////////// global div for filters /////////////
	this.createGlobalDiv = function(){
	
		me.globalDiv = $('<div class="cubee-table-paging">'
				+ 	'<div class="cubee-center">'
				+ 		'<div>'
				+			'<a href="#" class="rew-total"> << </a>'
				+			'<a href="#" class="rew"> < </a>'
				+			'Page <input type="text" class="current-page-num" value="1"> / <span class="nbpage-total">1</span>'
				+			'<a href="#" class="fwd"> > </a>'
				+			'<a href="#" class="fwd-total"> >> </a>'
				+		'</div>'
				+	'</div>'
				+'</div>');
	},
	
	this.updatePageNumber = function(pageNumber){
	
		me.globalDiv.find('.current-page-num').val(pageNumber);
	};
	
	this.updateTotalNbPage = function(totalNbPage){

		me.globalDiv.find('.nbpage-total').html(totalNbPage);
	};
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////// constructor body ///////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	this.constructor = function(){
	
		me.createGlobalDiv();
		me.currentPage = 1;
		
		me.globalDiv.find('a').click(function(event){
			event.preventDefault();
			var hrefElem = $(this);
			if(hrefElem.hasClass('rew-total')){
				me.currentPage = 1;
			}
			else if(hrefElem.hasClass('rew')){
				me.currentPage = Math.max(me.currentPage - 1, 1);
			}
			else if(hrefElem.hasClass('fwd')){
				me.currentPage = Math.min(me.currentPage + 1, me.nbTotalPage);
			}
			/*var params = {
				'page-num': me.currentPage
			};
			Http.sendRequest('http://toto.com', params, function(response){
				thisTable.append('<tr></tr>');
			});*/
			me.updatePageNumber(me.currentPage);
			stdTable.triggerPageChange(me.currentPage);
		});
	}
	
	this.constructor();
	
	
};
